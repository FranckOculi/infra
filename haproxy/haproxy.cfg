global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon
        description Test Haproxy

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        # An alternative list with additional directives can be obtained from
        #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
        ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
        ssl-default-bind-options no-sslv3

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

frontend simple_front1
    description simple front for all ip address on port 80
    bind *:80
    default_backend simple_back1


frontend simple_front2
    description simple front for localhost on port 4000
    bind 127.0.0.1:4000
    default_backend simple_back2

backend simple_back1
    description nginx server
    server srv_nginx1 172.17.0.1:8080

backend simple_back2
    description load balancer with 2 nginx servers
    balance roundrobin
    server srv_nginx2 172.17.0.1:8080
    server srv_nginx3 172.17.0.1:5000


frontend front1
    description front for myapp1.fr on port 3000
    bind *:3000
    mode http
    option forwardfor
    use_backend back1 if { hdr_dom(host) -i myapp1.fr }

frontend front2
    description front for myapp2.fr on port 4000
    bind *:4000
    mode http
    use_backend back2 if { hdr_dom(host) -i myapp2.fr }

backend back1
    description load balancer with 2 node.js app servers
    balance roundrobin
    # just picks the next server and starts over at the top of the list again
    server srv_app1 172.17.0.2:8080
    server srv_app1 172.17.0.3:8080

backend back2
    description load balancer with 2 database servers
    balance leastconn
    # select the server with the fewest active sessions
    server srv_app2 172.17.0.4:8080
    server srv_app3 172.17.0.5:8080